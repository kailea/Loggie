# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: macos-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Set up Swift
      uses: SwiftyLab/setup-swift@latest

    - name: Build and run tests with coverage
      run: |
        swift test --enable-code-coverage

    - name: Generate coverage report
      run: |
        mkdir -p coverage
        xcrun llvm-cov export \
          .build/debug/LoggiePackageTests.xctest/Contents/MacOS/LoggiePackageTests \
          -instr-profile .build/debug/codecov/default.profdata \
          -format=lcov > coverage/lcov.info

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: coverage/lcov.info
        flags: unittests
        name: codecov-loggie
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: kailea/Loggie
        fail_ci_if_error: true
        verbose: true
        
	tag:
		needs: test
		if: github.event_name == 'push' && github.ref == 'refs/heads/main'
		runs-on: ubuntu-latest

		steps:
		- name: Checkout repository
		  uses: actions/checkout@v3

		- name: Get latest tag
		  id: get_tag
		  run: |
			git fetch --tags
			latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
			echo "latest=$latest_tag" >> $GITHUB_OUTPUT

		- name: Bump tag version
		  id: bump_tag
		  run: |
			IFS='.' read -r major minor patch <<<"${{ steps.get_tag.outputs.latest#v }}"
			new_tag="v$major.$minor.$((patch + 1))"
			echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

		- name: Create Git tag
		  run: |
			git config user.name "GitHub Actions"
			git config user.email "actions@github.com"
			git tag ${{ steps.bump_tag.outputs.new_tag }}
			git push origin ${{ steps.bump_tag.outputs.new_tag }}
