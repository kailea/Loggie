# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: macos-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Set up Swift
      uses: SwiftyLab/setup-swift@latest

    - name: Build and run tests with coverage
      run: |
        swift test --enable-code-coverage --no-parallel

    - name: Generate coverage report
      run: |
        mkdir -p coverage
        xcrun llvm-cov export \
          .build/debug/LoggiePackageTests.xctest/Contents/MacOS/LoggiePackageTests \
          -instr-profile .build/debug/codecov/default.profdata \
          -format=lcov > coverage/lcov.info

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: coverage/lcov.info
        flags: unittests
        name: codecov-loggie
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: kailea/Loggie
        fail_ci_if_error: true
        verbose: true

  create_tag:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: release   # ðŸ‘ˆ this matches the environment name you created
      url: https://github.com/kailea/Loggie/releases
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Get Last Tag
      id: last_tag
      run: |
        # Fetch all tags from the remote repository
        git fetch --tags
        # Extract tags, strip leading v's, sort semver, and get the latest
        CLEAN_TAG=$(git tag | sed 's/^v*//' | sort -V | tail -n 1)

        echo "Clean/latest tag: $CLEAN_TAG"
        echo "LAST_TAG=$CLEAN_TAG" >> $GITHUB_ENV
    
    - name: Increment Tag
      id: increment_tag
      run: |
        if [ -z "$LAST_TAG" ]; then
          # If the last tag is empty, set new tag to 1.0.0
          NEW_TAG="1.0.0"
        else
          # Split the last tag into parts
          tag_parts=($(echo $LAST_TAG | tr '.' ' '))
          # Increment the patch version
          patch=$((tag_parts[2] + 1))
          # Construct the new tag
          NEW_TAG="${tag_parts[0]}.${tag_parts[1]}.$patch"
        fi
        echo "New tag: $NEW_TAG"
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
 
    - name: Generate Changelog
      id: generate_changelog
      run: |
        echo "Generating changelog since last tag: v${{ env.LAST_TAG }}"
        changelog=$(git log v${{ env.LAST_TAG }}..HEAD --pretty=format:"- %s" --no-merges)
        echo "changelog<<EOF" >> $GITHUB_ENV
        echo "$changelog" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.NEW_TAG }}
        name: Release v${{ env.NEW_TAG }}
        body: |
          ## Changes since v${{ env.LAST_TAG }}
          ${{ env.changelog }}
